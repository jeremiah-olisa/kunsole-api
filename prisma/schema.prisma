generator client {
  provider = "prisma-client-js"
  // output   = "./../src/prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  PASSWORD
  GOOGLE
  GITHUB
}

enum EntryType {
  EMAIL
  SMS
  TERMINAL
}

enum PlanType {
  SYSTEM
  CUSTOM
}

enum UserRole {
  ADMIN
  USER
}

enum AppUserRole {
  OWNER
  ADMIN
  DEVELOPER
  VIEWER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentProvider {
  PAYSTACK
  FLUTTERWAVE
  PAYPAL
}

model App {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  publicKey     String         @unique
  secretKey     String         @unique // Hashed with bcrypt
  description   String?
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Boolean        @default(true)
  planId        String         @db.ObjectId
  plan          Plan           @relation(fields: [planId], references: [id])
  entries       Entry[]
  userApp       UserApp[]
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  fullName      String
  userKey       String         @unique @default(uuid()) // UUID for user identification
  password      String? // Nullable for OAuth users
  provider      AuthProvider   @default(PASSWORD)
  providerId    String? // ID from OAuth provider
  profileImage  String?
  role          UserRole       @default(USER)
  lastLogin     DateTime?
  refreshToken  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  entries       Entry[]
  subscriptions Subscription[]
  userApp       UserApp[]
  Payment       Payment[]

  @@index([email, provider])
}

model UserApp {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  appId     String      @db.ObjectId
  app       App         @relation(fields: [appId], references: [id])
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  role      AppUserRole @default(DEVELOPER)
}

model Entry {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  type      EntryType
  content   String
  metadata  Json?
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  appId     String    @db.ObjectId
  app       App       @relation(fields: [appId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  loggedAt  DateTime
  readAt    DateTime?

  @@index([appId])
  @@index([userId])
}

model Plan {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  type               PlanType
  name               String
  description        String
  price              Float
  maxApps            Int
  maxUsers           Int
  entryRetentionDays Int // 0 means no retention (immediate deletion)
  maxEntries         Int // 0 means unlimited
  features           Json // Additional features as JSON
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  apps               App[]
  subscritions       Subscription[]
}

model Payment {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  amount       Float
  currency     String          @default("NGN")
  reference    String          @unique
  provider     PaymentProvider
  status       PaymentStatus   @default(PENDING)
  metadata     Json?
  userId       String          @db.ObjectId
  user         User            @relation(fields: [userId], references: [id])
  subscription Subscription?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Subscription {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  planId    String    @db.ObjectId
  plan      Plan      @relation(fields: [planId], references: [id])
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  paymentId String?   @unique @db.ObjectId
  payment   Payment?  @relation(fields: [paymentId], references: [id])
  startsAt  DateTime?
  endsAt    DateTime?
  isActive  Boolean   @default(false)
  isQueued  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}
